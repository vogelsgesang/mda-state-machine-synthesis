modeltype CommonConcepts uses "urn:commonconcepts/1.0";
modeltype IoAutomaton uses "urn:io-automaton/1.0";

transformation mergeIoAutomaton(in automatons:IoAutomaton, out diagram:IoAutomaton);

main() {
	automatons.rootObjects()[IoAutomaton::AutomatonCollection]->map merge();
}

mapping IoAutomaton::AutomatonCollection::merge() : IoAutomaton::Automaton {
	init {
		log("Start merge()");
	}
	
	var mainActorNames := self.automatons.mainActor.name->asSet();
	var automatonsResult := object IoAutomaton::AutomatonCollection{};
	mainActorNames->forEach(mainActorName | true) {
		var automatonsForActor := self.automatons->select(automaton | automaton.mainActor.name = mainActorName);
		var mergedAutomaton := automatonsForActor->mergeStatesAndTransitions();
		var mainActor := object SystemActor{};
		mainActor.name := mainActorName;
		mergedAutomaton.mainActor := mainActor;
		automatonsResult.automatons += mergedAutomaton;
	}
	
	end {
		log("Finished automatons merge()");		
	}
}

helper Set(IoAutomaton::Automaton)::mergeStatesAndTransitions() : Automaton {
	var mergedAutomaton := object IoAutomaton::Automaton{};
	
	var uniqueStates : Set(IoAutomaton::State) := Set{};
	self->forEach(automaton | true) {
		automaton.states->forEach(state | not uniqueStates->isStateContained(state)) {
			var uniqueState := state.deepclone().oclAsType(IoAutomaton::State);
			log("Add unique state " + uniqueState.name);
			uniqueStates += uniqueState;
		};
		mergedAutomaton.startState := automaton.startState;
	};
	
	var uniqueTransitions : Set(Transition) := Set{};
	self->forEach(automaton | true) {
		automaton.transitions->forEach(transition | not uniqueTransitions->isTransitionContained(transition)) {
			var uniqueTransition := transition.deepclone().oclAsType(Transition);
			uniqueTransition.preState := uniqueStates->getState(transition.preState.name);
			uniqueTransition.postState := uniqueStates->getState(transition.postState.name);
			log("Add unique transition " + uniqueTransition.preState.name + " -> " + uniqueTransition.postState.name);
			uniqueTransitions += uniqueTransition;
		};
	};
	
	mergedAutomaton.states := uniqueStates;
	mergedAutomaton.transitions := uniqueTransitions;
	mergedAutomaton.startState := self->asSequence()->first().oclAsType(Automaton).startState;
	return mergedAutomaton;
}

query Set(IoAutomaton::State)::getState(stateName : String) : IoAutomaton::State {
	self->forEach(setState | setState.name = stateName) {
		return setState;
	};
	assert fatal (true) with log("No state with name " + stateName + " found");
	return null;
}

query Set(IoAutomaton::State)::isStateContained(state : IoAutomaton::State) : Boolean {
	var stateName = state.name;
	return self->exists(setState | setState.name = stateName);
}

query Set(IoAutomaton::Transition)::isTransitionContained(transition : IoAutomaton::Transition) : Boolean {
	var outMessages := transition.outMessages;
	self->forEach(setTransition 
					| setTransition.operation.name = transition.operation.name
					and setTransition.preState.name = transition.preState.name
					and setTransition.postState.name = transition.postState.name) {
		// operation, pre and post equal
		// now check the outMessages
		if(not (outMessages->size() = setTransition.outMessages->size())) {
			return false;
		};
		var outProduct := outMessages->product(setTransition.outMessages);
		var equalCount := 0;
		outProduct->forEach(outProdTuple | true) {
			var first := outProdTuple.first;
			var second := outProdTuple.second;
			if (first.operation.name = second.operation.name
					and first.receiver.name = second.receiver.name
					and first.returnValue.value = second.returnValue.value) {
				equalCount := equalCount + 1;
			}
		};
		if(equalCount = outMessages->size()) {
			return true;
		}
	};
	return false;
}
