modeltype CommonConcepts uses "urn:commonconcepts/1.0";
modeltype IoAutomaton uses "urn:io-automaton/1.0";

transformation mergeIoAutomaton(in automatons:IoAutomaton, out diagram:IoAutomaton);

main() {
	automatons.rootObjects()[IoAutomaton::AutomatonCollection]->map mergeAutomatonCollection();
}

mapping IoAutomaton::AutomatonCollection::mergeAutomatonCollection() : IoAutomaton::AutomatonCollection {
	init {
		log("Start merge()");
	
		var mainActorNames := self.automaton.mainActor.name->asSet();
		var automatonsResult := object IoAutomaton::AutomatonCollection{};
		mainActorNames->forEach(mainActorName | true) {
			log("Actor " + mainActorName);
			var automatonsForActor := self.automaton->select(automaton | automaton.mainActor.name = mainActorName);
			var mergedAutomaton := automatonsForActor->mergeStatesAndTransitions();
			var mainActor := object SystemActor{};
			mainActor.name := mainActorName;
			mergedAutomaton.mainActor := mainActor;
			automatonsResult.automaton += mergedAutomaton;
		};
		result := automatonsResult;
	}
	
	end {
		log("Finished automatons merge()");		
	}
}

helper Set(IoAutomaton::Automaton)::mergeStatesAndTransitions() : Automaton {
	var mergedAutomaton := object IoAutomaton::Automaton{};
	
	var uniqueStates : Set(IoAutomaton::State) := Set{};
	self->forEach(automaton | true) {
		automaton.state->forEach(state | not uniqueStates->isStateContained(state)) {
			var uniqueState := state.deepclone().oclAsType(IoAutomaton::State);
			log("Add unique state " + uniqueState.name);
			uniqueStates += uniqueState;
		};
		mergedAutomaton.startState := automaton.startState;
	};
	
	var uniqueTransitions : Set(Transition) := Set{};
	self->forEach(automaton | true) {
		automaton.transition->forEach(transition | not uniqueTransitions->isTransitionContained(transition)) {
			var uniqueTransition := object Transition{};
			uniqueTransition.operation := transition.operation.deepclone().oclAsType(Operation);
			uniqueTransition.outMessage := transition.outMessage.deepclone().oclAsType(OutMessage);
			uniqueTransition.returnValue := transition.returnValue.deepclone().oclAsType(Return);
			uniqueTransition.preState := uniqueStates->getState(transition.preState.name);
			uniqueTransition.postState := uniqueStates->getState(transition.postState.name);
			log("Add unique transition " + uniqueTransition.preState.name + " -> " + uniqueTransition.postState.name);
			uniqueTransitions += uniqueTransition; // uniqueTransition.automaton assigned automatically
		};
	};
	
	uniqueStates->forEach(uniqueState | true) {
		var reassignedIncomingTransitions : Set(Transition) := Set{};
		uniqueState.incomingTransition->forEach(transition | true) {
			reassignedIncomingTransitions += uniqueTransitions->getTransition(transition.preState, transition.postState);
		};
		uniqueState.incomingTransition := reassignedIncomingTransitions;
		
		var reassignedOutgoingTransitions : Set(Transition) := Set{};
		uniqueState.outgoingTransition->forEach(transition | true) {
			reassignedOutgoingTransitions += uniqueTransitions->getTransition(transition.preState, transition.postState);
		};
		uniqueState.outgoingTransition := reassignedOutgoingTransitions;
	};
	
	mergedAutomaton.state := uniqueStates;
	mergedAutomaton.transition := uniqueTransitions;
	var startState := self->asSequence()->first().oclAsType(Automaton).startState;
	mergedAutomaton.startState := mergedAutomaton.state->getState(startState.name);
	return mergedAutomaton;
}

query Set(IoAutomaton::State)::getState(stateName : String) : IoAutomaton::State {
	self->forEach(setState | setState.name = stateName) {
		return setState;
	};
	assert fatal (true) with log("No state with name " + stateName + " found");
	return null;
}

query Set(IoAutomaton::Transition)::getTransition(preState : IoAutomaton::State, postState : IoAutomaton::State) : IoAutomaton::Transition {
	self->forEach(transition | transition.preState.name = preState.name and transition.postState.name = postState.name) {
		return transition;
	};
	assert fatal (true) with log("No transition with preState " + preState.name + " and postState " + postState.name + " found");
	return null;
}

query Set(IoAutomaton::State)::isStateContained(state : IoAutomaton::State) : Boolean {
	var stateName = state.name;
	return self->exists(setState | setState.name = stateName);
}

query Set(IoAutomaton::Transition)::isTransitionContained(transition : IoAutomaton::Transition) : Boolean {
	var outMessages := transition.outMessage;
	self->forEach(setTransition 
					| setTransition.operation.name = transition.operation.name
					and setTransition.preState.name = transition.preState.name
					and setTransition.postState.name = transition.postState.name) {
		// operation, pre and post equal
		// now check the outMessages
		if(not (outMessages->size() = setTransition.outMessage->size())) {
			return false;
		};
		var outProduct := outMessages->product(setTransition.outMessage);
		var equalCount := 0;
		outProduct->forEach(outProdTuple | true) {
			var first := outProdTuple.first;
			var second := outProdTuple.second;
			if (first.operation.name = second.operation.name
					and first.receiver.name = second.receiver.name
					and first.returnValue.value = second.returnValue.value) {
				equalCount := equalCount + 1;
			}
		};
		if(equalCount = outMessages->size()) {
			return true;
		}
	};
	return false;
}
