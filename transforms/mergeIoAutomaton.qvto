modeltype IOAutomatonModel uses "urn:io-automaton/1.0";
modeltype CommonConcepts uses "urn:commonconcepts/1.0";

transformation mergeIoAutomaton(in automatons:IOAutomatonModel, out diagram:IOAutomatonModel);

main() {
	automatons.rootObjects()[AutomatonCollection]->map merge();
}

mapping IOAutomatonModel::AutomatonCollection::merge() : IOAutomatonModel::Automaton {
	init {
		log("Start merge()");
	}
	
	result.states := Set{};
	var mainActorNames := self.automatons.mainActor.name->asSet();
	var automatonsResult := object AutomatonCollection{};
	mainActorNames->forEach(mainActorName | true) {
		var allAutomatons := self.automatons->select(automaton | automaton.mainActor.name = mainActorName);
		var mergedAutomaton := allAutomatons.mergeAutomatons();
		automatonsResult.automatons += mergedAutomaton;
	}
	
	end {
		log("Finished mapping toAutomaton()");		
	}
}

mapping IOAutomatonModel::AutomatonCollection::getStates() : Set(IOAutomatonModel::State) {
	init {
		result := Set{};	
		self.automatons->forEach(automaton | true) {
			result += automaton.states.deepclone().oclAsType(IOAutomatonModel::State);
		}
	}	
}

mapping IOAutomatonModel::AutomatonCollection::getTransitions() : Set(IOAutomatonModel::Transition) {
	init {
		result := Set{};	
		self.automatons->forEach(automaton | true) {
			result += automaton.transitions.deepclone().oclAsType(IOAutomatonModel::Transition);
		}
	}	
}

helper Set(IOAutomatonModel::Automaton)::merge() : Automaton {
	
}