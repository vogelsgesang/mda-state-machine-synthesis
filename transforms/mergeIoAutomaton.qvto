modeltype IOAutomatonModel uses "urn:io-automaton/1.0";
modeltype CommonConcepts uses "urn:commonconcepts/1.0";

transformation mergeIoAutomaton(in automatons:IOAutomatonModel, out diagram:IOAutomatonModel);

main() {
	automatons.rootObjects()[AutomatonCollection]->map merge();
}

mapping IOAutomatonModel::AutomatonCollection::merge() : IOAutomatonModel::Automaton {
	init {
		log("Start merge()");
	}
	
	var mainActorNames := self.automatons.mainActor.name->asSet();
	var automatonsResult := object AutomatonCollection{};
	mainActorNames->forEach(mainActorName | true) {
		var automatonsForActor := self.automatons->select(automaton | automaton.mainActor.name = mainActorName);
		var mergedAutomaton := automatonsForActor.mergeStatesAndTransitions();
		var mainActor := object SystemActor{};
		mainActor.name := mainActorName;
		mergedAutomaton.mainActor := mainActor;
		automatonsResult.automatons += mergedAutomaton;
	}
	
	end {
		log("Finished automatons merge()");		
	}
}

mapping IOAutomatonModel::AutomatonCollection::getStates() : Set(IOAutomatonModel::State) {
	init {
		result := Set{};	
		self.automatons->forEach(automaton | true) {
			result += automaton.states.deepclone().oclAsType(IOAutomatonModel::State);
		}
	}	
}

mapping IOAutomatonModel::AutomatonCollection::getTransitions() : Set(IOAutomatonModel::Transition) {
	init {
		result := Set{};
		self.automatons->forEach(automaton | true) {
			result += automaton.transitions.deepclone().oclAsType(IOAutomatonModel::Transition);
		}
	}	
}

helper Set(Automaton)::mergeStatesAndTransitions() : Automaton {
	var uniqueStates : Set(State) := Set{};
	self->forEach(automaton | true) {
		automaton.states->forEach(state | not uniqueStates.isStateContained(state)) {
			uniqueStates += state.deepclone().oclAsType(State);
		};
	};
	
	var transitions : Set(Transition) := Set{};
	
	
	var automaton := object Automaton{};
	automaton.states := uniqueStates;
	automaton.transitions := transitions;
	automaton.startState := self->first().oclAsType(Automaton).startState;
	return automaton;
}

query Set(State)::isStateContained(state : State) : Boolean {
	var stateName = state.name;
	return self->forAll(setState | setState.name = stateName);
}
