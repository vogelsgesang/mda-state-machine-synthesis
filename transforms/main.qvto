import uml2scenario;
import scenario2behaviour;
import behaviour2automaton;
import mergeIoAutomaton;
import automaton2uml;

modeltype CommonConcepts uses "urn:commonconcepts/1.0";
modeltype IoAutomaton uses "urn:io-automaton/1.0"; 
modeltype UML uses  "http://www.eclipse.org/uml2/5.0.0/UML";
modeltype BehaviourModel uses "urn:behaviour/1.0";
modeltype ScenarioModel uses "urn:scenario/1.0";

transformation sequenceToState(
	in sequence : UML, out statemachine : UML)
	access transformation uml2scenario(in UML, out ScenarioModel)
	access transformation scenario2behaviour(in ScenarioModel, out BehaviourModel)
	access transformation behaviour2automaton(in BehaviourModel, out IoAutomaton)
	access transformation mergeIoAutomaton(in IoAutomaton, out IoAutomaton)
	access transformation automaton2uml(in IoAutomaton, out UML);

main() {
	var scenarios := ScenarioModel.createEmptyModel().oclAsType(ScenarioModel);
	var behaviours := BehaviourModel.createEmptyModel().oclAsType(BehaviourModel);
	var automata := IoAutomaton.createEmptyModel().oclAsType(IoAutomaton);
	var mergedAutomata := IoAutomaton.createEmptyModel().oclAsType(IoAutomaton);
	
	var umlToScenario := new uml2scenario(sequence, scenarios);
	var scenarioToBehaviour := new scenario2behaviour(scenarios, behaviours);
	var behaviourToAutomaton := new behaviour2automaton(behaviours, automata);
	var mergeAutomata := new mergeIoAutomaton(automata, mergedAutomata);
	var automataToUml := new automaton2uml(mergedAutomata, statemachine);
	
	umlToScenario.transform();
	scenarioToBehaviour.transform();
	behaviourToAutomaton.transform();
	mergeAutomata.transform();
	automataToUml.transform();
}
